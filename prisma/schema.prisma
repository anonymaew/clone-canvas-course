generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String              @id @default(cuid())
    name              String?
    email             String?             @unique
    emailVerified     BigInt?
    role              Role                @default(STUDENT)
    content           String              @default("")
    image             String?
    accounts          Account[]
    sessions          Session[]
    TeacherEnrollment TeacherEnrollment[]
    StudentEnrollment StudentEnrollment[]
    Payment           Payment[]
}

model VerificationToken {
    identifier String
    token      String @unique
    expires    BigInt

    @@unique([identifier, token])
}

enum Role {
    ADMIN
    TEACHER
    STUDENT
}

model Course {
    id            String              @id @default(cuid())
    title         String
    created       DateTime            @default(now())
    updated       DateTime            @updatedAt
    published     Boolean             @default(false)
    price         String?
    content       String              @default("")
    lessons       Lesson[]
    announcements Announcement[]
    teachers      TeacherEnrollment[]
    students      StudentEnrollment[]
}

model TeacherEnrollment {
    id        String @id @default(cuid())
    teacherId String
    teacher   User   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    courseId  String
    course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model StudentEnrollment {
    id        String @id @default(cuid())
    studentId String
    student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
    courseId  String
    course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
    PENDING
    APPROVED
    REJECTED
}

model Payment {
    id             String        @id @default(cuid())
    userId         String
    user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    courseId       String
    amount         String?
    image          String?
    status         PaymentStatus @default(PENDING)
    approvedUserId String?
    created        DateTime      @default(now())
    updated        DateTime      @updatedAt
}

model Lesson {
    id        String   @id @default(cuid())
    courseId  String
    course    Course   @relation(fields: [courseId], references: [id])
    title     String
    created   DateTime @default(now())
    updated   DateTime @updatedAt
    published Boolean  @default(false)
    content   String   @default("")
}

model Announcement {
    id         String @id @default(cuid())
    announceId String @unique
    courseId   String
    course     Course @relation(fields: [courseId], references: [id])
    title      String
    announceAt BigInt
    content    String @default("")
}
